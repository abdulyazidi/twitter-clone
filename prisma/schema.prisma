// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["queryCompiler", "driverAdapters", "typedSql"]
  output          = "../node_modules/@prisma-app/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Core User info
  id           String  @id @default(ulid()) // Prefix in query/middleware thingy
  username     String  @unique
  email        String  @unique
  passwordHash String
  salt         String
  isPrivate    Boolean @default(false) // is profile private

  followersCount Int          @default(0) // denormalize
  followingCount Int          @default(0)
  // User related details/actions
  tweets         Tweet[]
  likes          Like[]
  // Relations
  profile        UserProfile?
  followers      Follow[]     @relation(name: "followers")
  following      Follow[]     @relation(name: "following")
  sessions       Session[]
  mentions       Mention[]
  bookmarks      Bookmark[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model UserProfile {
  userId      String   @id
  user        User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  displayName String
  bio         String?
  avatarURL   String?
  location    String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mention {
  userId  String
  tweetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tweetId])
}

model Follow {
  followerId  String
  followingId String
  // keep it 
  follower  User @relation(name: "following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "followers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
}

model Tweet {
  id   String     @id @default(ulid())
  type TWEET_TYPE

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Shared
  content String? // Nullable cuz some types dont need content (retweets, image tweets...)

  // Reply fields
  parentTweetId String?
  parentTweet   Tweet?  @relation("Replies", fields: [parentTweetId], references: [id], onDelete: SetNull)
  replies       Tweet[] @relation("Replies")

  // Quote fields
  quotedTweetId String?
  quoteTweet    Tweet?  @relation("Quotes", fields: [quotedTweetId], references: [id], onDelete: SetNull)
  quotes        Tweet[] @relation("Quotes")

  // Retweet fields
  retweetedTweetId String?
  retweetedTweet   Tweet?  @relation("RetweetedTweets", fields: [retweetedTweetId], references: [id], onDelete: Cascade) // the tweet that was retweeted
  retweets  Tweet[] @relation("RetweetedTweets") // list of tweets that retweeted a tweet 

  mentions Mention[]
  likes    Like[]

  Bookmark      Bookmark[]
  //Denormalized counters
  likeCount     Int        @default(0)
  replyCount    Int        @default(0)
  quoteCount    Int        @default(0)
  retweetCount  Int        @default(0)
  bookmarkCount Int        @default(0)
  media         Media[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([authorId, retweetedTweetId, type], name: "unique_retweet") // prevent duplicate retweets

}

model Media {
  id        String     @id @default(ulid())
  type      MEDIA_TYPE
  tweetId   String
  tweet     Tweet      @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum MEDIA_TYPE {
  IMAGE
  VIDEO
  AUDIO
  GIF
}

enum TWEET_TYPE {
  TWEET
  REPLY
  QUOTE_TWEET
  RETWEET
}

model Like {
  userId  String
  tweetId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([userId, tweetId]) // A user can only like a tweet once
}

model Bookmark {
  userId    String
  tweetId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, tweetId]) // A user can only bookmark a tweet once
}

model Session {
  id        String  @id @default(uuid())
  sessionId String  @unique
  userId    String
  userAgent String?
  ipAddress String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  expiresAt DateTime
}
